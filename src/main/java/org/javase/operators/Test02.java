package org.javase.operators;

import org.junit.jupiter.api.Test;

/**
 * 逻辑运算符 & ,| ,~ ,^ ,<< ,>> ,>>>
 */
public class Test02 {
    /**
     * 有符号左移
     */
    @Test
    public void test01(){
        //思路：
        // 先将3转换位2进制，然后再向左移动2位，得到的2进制数再转换为10进制数就是结果。
        //   00000000 00000000 00000000 0000 0011 -->3
        // 0000000000 00000000 00000000 0000 1100 -->12
        //结论：左移相当于是原数乘以2的n次方
        //3*2^2 3*2*2
        System.out.println(3<<2);
    }
    @Test
    /**
     * 有符号右移 将6>>2
     */
    public void test02(){
        //思路：
        // 先将6转换位2进制，然后再向右移动2位，得到的2进制数再转换为10进制数就是结果。
        //   00000000 00000000 00000000 00000110 -->6
        //     00000000 00000000 00000000 00000110 -->1
        //结论：右移相当于是原数除以2的n次方
        System.out.println(6>>2);
    }

    /**
     * 有符号右移 负数 -6>>2
     */
    @Test
    public void test03(){
        // 6的二进制  00000000 00000000 00000000 00000110 -->6
        // 思路：
        //1，取反     11111111 11111111 11111111 11111001
        //2，加1      11111111 11111111 11111111 11111010 --> -6
        //3，右移       1111111111 11111111 11111111 111110  --> 这一看就是个负数
        //4，减1        1111111111 11111111 11111111 111101
        //5，取反       0000000000 00000000 00000000 000010 -->2
        //6，再加上负号就是最终结果 -2
        System.out.println(-6>>2);


    }
    @Test
    /**
     * 无符号右移 6>>>2
     * 无符号 补的都是0
     */
    public void test04(){
        // 6的二进制：00000000 00000000 00000000 00000110
        //右移：       00000000 00000000 00000000 00000110
        System.out.println(6>>>2);
    }

    /**
     * 与操作 &，同为1，则为1，否则为0
     * 6&3
     */
    @Test
    public void test05(){
        // 6的二进制：00000000 00000000 00000000 00000110
        // 3的二进制：00000000 00000000 00000000 00000011
        // 结果：    00000000 00000000 00000000 00000010 --> 2
        System.out.println(6&3);
    }
    @Test
    /**
     * 或操作"|"，只要有一个为真则都为真
     * 6｜3
     */
    public void test06(){
        // 6的二进制：00000000 00000000 00000000 00000110
        // 3的二进制：00000000 00000000 00000000 00000011
        // 结果：    00000000 00000000 00000000 00000111 ->7
        System.out.println(6|3);
    }
    @Test
    /**
     * 异或操作"^"，相同为0，不同为1
     * 6^3
     */
    public void test07(){
        // 6的二进制：00000000 00000000 00000000 00000110
        // 3的二进制：00000000 00000000 00000000 00000011
        // 结果：    00000000 00000000 00000000 00000101 ->5
        System.out.println(6^3);
    }

    @Test
    /**
     * 取反操作"~"，0是1，1是0
     * ~6
     */
    public void test08(){
        // 6的二进制：00000000 00000000 00000000 00000110
        //  取反：   11111111 11111111 11111111 11111001 -->一定是个负数
        //   减1：   11111111 11111111 11111111 11111000
        // 取反：    00000000 00000000 00000000 00000111 -->7
        // 再加负号： -7
        System.out.println(~6);
    }
    //byte 类型的-128是怎么算出来的
     //127： 01111111
     //-128：1000000
    //思路：把127对应的二进制取反，再加个负号就是了。
    /*

    1，先减1     0111111
    2，取反：    1000000 -->2^7 =128
    3，加负号：   -128
    * */

}
